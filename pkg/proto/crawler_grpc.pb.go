// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/proto/crawler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Crawler_SubmitUrl_FullMethodName         = "/proto.Crawler/SubmitUrl"
	Crawler_GetArticle_FullMethodName        = "/proto.Crawler/GetArticle"
	Crawler_ListArticles_FullMethodName      = "/proto.Crawler/ListArticles"
	Crawler_StreamNewArticles_FullMethodName = "/proto.Crawler/StreamNewArticles"
)

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerClient interface {
	SubmitUrl(ctx context.Context, in *SubmitUrlRequest, opts ...grpc.CallOption) (*SubmitUrlResponse, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error)
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error)
	StreamNewArticles(ctx context.Context, in *StreamNewArticlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Article], error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) SubmitUrl(ctx context.Context, in *SubmitUrlRequest, opts ...grpc.CallOption) (*SubmitUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitUrlResponse)
	err := c.cc.Invoke(ctx, Crawler_SubmitUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Article)
	err := c.cc.Invoke(ctx, Crawler_GetArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListArticlesResponse)
	err := c.cc.Invoke(ctx, Crawler_ListArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) StreamNewArticles(ctx context.Context, in *StreamNewArticlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Article], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Crawler_ServiceDesc.Streams[0], Crawler_StreamNewArticles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamNewArticlesRequest, Article]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Crawler_StreamNewArticlesClient = grpc.ServerStreamingClient[Article]

// CrawlerServer is the server API for Crawler service.
// All implementations must embed UnimplementedCrawlerServer
// for forward compatibility.
type CrawlerServer interface {
	SubmitUrl(context.Context, *SubmitUrlRequest) (*SubmitUrlResponse, error)
	GetArticle(context.Context, *GetArticleRequest) (*Article, error)
	ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error)
	StreamNewArticles(*StreamNewArticlesRequest, grpc.ServerStreamingServer[Article]) error
	mustEmbedUnimplementedCrawlerServer()
}

// UnimplementedCrawlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrawlerServer struct{}

func (UnimplementedCrawlerServer) SubmitUrl(context.Context, *SubmitUrlRequest) (*SubmitUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUrl not implemented")
}
func (UnimplementedCrawlerServer) GetArticle(context.Context, *GetArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedCrawlerServer) ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedCrawlerServer) StreamNewArticles(*StreamNewArticlesRequest, grpc.ServerStreamingServer[Article]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNewArticles not implemented")
}
func (UnimplementedCrawlerServer) mustEmbedUnimplementedCrawlerServer() {}
func (UnimplementedCrawlerServer) testEmbeddedByValue()                 {}

// UnsafeCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerServer will
// result in compilation errors.
type UnsafeCrawlerServer interface {
	mustEmbedUnimplementedCrawlerServer()
}

func RegisterCrawlerServer(s grpc.ServiceRegistrar, srv CrawlerServer) {
	// If the following call pancis, it indicates UnimplementedCrawlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Crawler_ServiceDesc, srv)
}

func _Crawler_SubmitUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).SubmitUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crawler_SubmitUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).SubmitUrl(ctx, req.(*SubmitUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crawler_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crawler_ListArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_StreamNewArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamNewArticlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlerServer).StreamNewArticles(m, &grpc.GenericServerStream[StreamNewArticlesRequest, Article]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Crawler_StreamNewArticlesServer = grpc.ServerStreamingServer[Article]

// Crawler_ServiceDesc is the grpc.ServiceDesc for Crawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitUrl",
			Handler:    _Crawler_SubmitUrl_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _Crawler_GetArticle_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _Crawler_ListArticles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNewArticles",
			Handler:       _Crawler_StreamNewArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/crawler.proto",
}
